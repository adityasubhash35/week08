name: CI - Consolidated Validation

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  ACR_NAME: sit722acr013
  ACR_LOGIN_SERVER: sit722acr013.azurecr.io
  IMAGE_TAG: ${{ github.sha }}-${{ github.run_id }}

jobs:
  validate:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [product_service, order_service, frontend]
    
    name: Validate ${{ matrix.service }}
    
    services:
      product_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: products
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      order_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: orders
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Backend services validation
      - name: Set up Python 3.10
        if: matrix.service != 'frontend'
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install backend dependencies
        if: matrix.service != 'frontend'
        run: |
          pip install --upgrade pip
          pip install -r backend/${{ matrix.service }}/requirements.txt
          pip install pytest httpx

      - name: Run product_service tests
        if: matrix.service == 'product_service'
        working-directory: backend/product_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: products
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: pytest tests --maxfail=1 --disable-warnings -q

      - name: Run order_service tests
        if: matrix.service == 'order_service'
        working-directory: backend/order_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5433
          POSTGRES_DB: orders
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: pytest tests --maxfail=1 --disable-warnings -q

      # Frontend validation
      - name: Set up Node.js
        if: matrix.service == 'frontend'
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Validate frontend structure
        if: matrix.service == 'frontend'
        run: |
          echo "Validating frontend files..."
          test -f frontend/Dockerfile || exit 1
          test -f frontend/main.js || exit 1
          echo "Frontend validation passed!"

      # Build and push only on push to main (not on PRs)
      - name: Azure Login
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Docker Buildx
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/setup-buildx-action@v3

      - name: Login to ACR
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: az acr login --name ${{ env.ACR_NAME }}

      - name: Build & Push product_service Image
        if: matrix.service == 'product_service' && github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/product_service:latest \
                       -t ${{ env.ACR_LOGIN_SERVER }}/product_service:${{ env.IMAGE_TAG }} \
                       ./backend/product_service
          docker push ${{ env.ACR_LOGIN_SERVER }}/product_service:latest
          docker push ${{ env.ACR_LOGIN_SERVER }}/product_service:${{ env.IMAGE_TAG }}

      - name: Build & Push order_service Image
        if: matrix.service == 'order_service' && github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/order_service:latest \
                       -t ${{ env.ACR_LOGIN_SERVER }}/order_service:${{ env.IMAGE_TAG }} \
                       ./backend/order_service
          docker push ${{ env.ACR_LOGIN_SERVER }}/order_service:latest
          docker push ${{ env.ACR_LOGIN_SERVER }}/order_service:${{ env.IMAGE_TAG }}

      - name: Build & Push frontend Image
        if: matrix.service == 'frontend' && github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/frontend:latest ./frontend
          docker push ${{ env.ACR_LOGIN_SERVER }}/frontend:latest

      - name: Logout from Azure
        if: always() && github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: az logout